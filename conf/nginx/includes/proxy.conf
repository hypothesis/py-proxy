# Proxy to the URL that's given in the path.
#
# For example if the request is:
#
# GET https://via3.hypothes.is/proxy/static/https://example.com/foo.pdf
#
# Then proxy to https://example.com/foo.pdf, returning foo.pdf to the browser.

# Pass the server name through when connecting to proxied HTTPS servers.
# I think this is needed to make proxying of some sites work.
# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_server_name
proxy_ssl_server_name on;

# Rewrite drive.google.com URLs to googleapis.com ones that use our API key.
#
# This is because Google gives us a much higher rate limit / quota when we use
# our API key.
#
# Notes:
#
# * If a `rewrite`'s replacement string starts with "http://", "https://" or
#   "$scheme" nginx immediately stops processing after this rewrite rule and
#   returns a redirect to the client. We don't want this to happen so we
#   capture the "https" in the `rewrite`'s regex so that we can use it as "$1"
#   in the replacement string!
#
# * If a `rewrite`'s replacement string contains query params nginx also
#   appends the _previous_ query params (from the pre-rewrite $uri) after them.
#   We don't want this. The `?` at the end of the replacement string disables it.
#
# * The `break` at the end causes nginx to skip any subsequent rewrite module
#   directives (e.g. other `rewrite`'s). If the request matches this rewrite
#   (i.e. it's an https://drive.google.com request) then this will be the
#   *last* rewrite that gets processed for the request.
#
#   Subsequent non-rewrite module directives will still get processed.
#
#   The `break` also causes nginx to stop processing at the end of this
#   `location { ... }` and send the `proxy_pass`'d response back to the
#   browser, rather than re-starting its processing using the rewritten $uri to
#   search for a matching `location { ... }` again.
#
# http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite
# http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#break
rewrite ^(https)://drive.google.com/uc\?id=(.*)&export=download$ $1://www.googleapis.com/drive/v3/files/$2?key=$google_api_key&alt=media? break;

# Remove the query params from the URI so we can add them back again later.
#
# If the request had matched the drive.google.com rewrite above its query
# params would have been removed. If the request does *not* match the
# drive.google.com rewrite then it will match this rewrite instead. We need to
# strip the query params from non-drive.google.com requests as well so that we
# can unconditionally re-add them in the proxy_pass below.
#
# The `break` is necessary to cause nginx to stop processing at the end of this
# `location { ... }` and send the `proxy_pass`'d response back to the browser,
# rather than re-starting its processing using the rewritten $uri to search for
# a matching `location { ... }` again.
#
# http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite
# http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#break
rewrite ^(.*)$ $1? break;

# Proxy to the resulting $uri (after all the `rewrite`s above).
#
# Query params have been stripped from $uri so re-add them with $is_args$args.
#
# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass
# http://nginx.org/en/docs/http/ngx_http_core_module.html#var_is_args
# http://nginx.org/en/docs/http/ngx_http_core_module.html#var_args
proxy_pass $uri$is_args$args;
