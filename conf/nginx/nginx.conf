# Tell nginx not to daemonize (background) itself: http://nginx.org/en/docs/ngx_core_module.html#daemon
daemon off;

# Change the location of the file that stores nginx's process ID: http://nginx.org/en/docs/ngx_core_module.html#pid
# TODO: Why do we change this?
pid /var/lib/hypothesis/nginx.pid;

# Log errors to stderr: http://nginx.org/en/docs/ngx_core_module.html#error_log
error_log /dev/stderr;

# How many files a worker can open at once: http://nginx.org/en/docs/ngx_core_module.html#worker_rlimit_nofile
# This has to be greater than or equal to worker_connections below.
# TODO: Why have we chosen this number?
worker_rlimit_nofile 7192;

events {
    # How many connections a worker can open at once: http://nginx.org/en/docs/ngx_core_module.html#worker_connections
    # TODO: Why have we chosen this number?
    worker_connections  1024;
}

http {
    # Configure the DNS that nginx uses to connect to the servers it's proxying.
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#resolver
    # TODO: Do we need to change this? Why have we chosen this value?
    resolver 8.8.8.8 ipv6=off;

    # Log accesses to stdout: http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log
    access_log /dev/stdout;

    include includes/app_upstream.conf;

    server {
        include /var/lib/hypothesis/nginx_envsubst.conf;

        # Route requests on port 9083 go to this `server { ... }` block.
        listen 9083;

        # By default nginx merges two or more consecutive slashes in a URL into
        # one. Turn this off since our URLs deliberately contain consecutive
        # slashes in the URL-to-be-proxied ("https://example.com").
        # http://nginx.org/en/docs/http/ngx_http_core_module.html#merge_slashes
        merge_slashes off;

        location ~ ^/proxy/static/(?<sec>[a-zA-Z0-9-_]+)/(?<exp>\d+)/ {
            # We don't want our URLs that proxy third-party pages to show in Google.
            include includes/robots.conf;

            # Require /proxy/static requests to be signed.
            include includes/secure_links.conf;

            include includes/errors.conf;
            include includes/direct_proxy.conf;
            include includes/cors.conf;

            # Cache for one day, but allow serving from cache while revalidating for a week.
            # https://web.dev/stale-while-revalidate/
            proxy_hide_header "Cache-Control";
            add_header "Cache-Control" "public, max-age=86400, stale-while-revalidate=604800";

            # Add an X-Via header for debugging.
            add_header "X-Via" "static-proxy, direct";
        }

        location @handle_redirect {
            include includes/errors.conf;
            include includes/cors.conf;

            # Pass the server name through when connecting to proxied HTTPS servers.
            # This is needed to make proxying of some sites work.
            # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_server_name
            proxy_ssl_server_name on;

            # Just using $upstream_http_location in the proxy_pass below
            # doesn't work. We have to save it into this variable first.
            set $saved_redirect_location '$upstream_http_location';

            # Follow the redirect internally, now proxying to the URL given in
            # the redirect's Location header.
            proxy_pass $saved_redirect_location;

            # Add an X-Via header for debugging.
            add_header "X-Via" "static-proxy, redirect";
        }

        location @proxy_not_found {
            # http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return
            return 404;
        }

        location @proxy_too_many_requests {
            # http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return
            return 429;
        }

        location @proxy_client_error {
            # http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return
            return 400;
        }

        location @proxy_upstream_error {
            # http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return
            return 409;
        }

        location / {
            # At least for now we don't want Via 3's non-proxy pages (including
            # the front page) to show in Google. Later (when Via 3 replaces the
            # public Via service) we'll probably want at least the front page
            # to be indexable.
            include includes/robots.conf;

            # Proxy to the Gunicorn/Pyramid app.
            # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass
            proxy_pass http://web;

            # Use HTTP 1.1 for proxying to the Gunicorn/Pyramid app.
            # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_http_version
            proxy_http_version 1.1;

            # Send the full HTTP Host header (including the port) through to
            # the Gunicorn/Pyramid app.
            # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_set_header
            # http://nginx.org/en/docs/http/ngx_http_core_module.html#var_http_
            # TODO: Why do we need to do this?
            proxy_set_header Host $http_host;

            # Add an X-Via header for debugging.
            add_header "X-Via" "compute";
        }
    }
}
