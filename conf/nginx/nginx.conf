# Tell nginx not to daemonize (background) itself: http://nginx.org/en/docs/ngx_core_module.html#daemon
daemon off;

# Change the location of the file that stores nginx's process ID: http://nginx.org/en/docs/ngx_core_module.html#pid
# nginx crashes if you don't do this, looks like maybe the default pidfile
# directory doesn't exist.
pid /var/lib/hypothesis/nginx.pid;

# Log errors to stderr: http://nginx.org/en/docs/ngx_core_module.html#error_log
error_log /dev/stderr;

events {
    # How many connections a worker can open at once: http://nginx.org/en/docs/ngx_core_module.html#worker_connections
    #
    # This number hasn't been chosen for any particularly good reason. It's
    # just an educated guess. The default of 512 seemed low and increasing it
    # by 4x seemed like it might increase performance with little risk of
    # breaking anything.
    worker_connections  2048;
}

http {
    # Configure the DNS that nginx uses to connect to the servers it's proxying.
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#resolver
    # TODO: Do we need to change this? Why have we chosen this value?
    resolver 8.8.8.8 ipv6=off;

    # Log accesses to stdout: http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log
    access_log /dev/stdout;

    include includes/app_upstream.conf;

    server {
        include /var/lib/hypothesis/nginx_envsubst.conf;

        # Route requests on port 9083 go to this `server { ... }` block.
        listen 9083;

        # By default nginx merges two or more consecutive slashes in a URL into
        # one. Turn this off since our URLs deliberately contain consecutive
        # slashes in the URL-to-be-proxied ("https://example.com").
        # http://nginx.org/en/docs/http/ngx_http_core_module.html#merge_slashes
        merge_slashes off;

        # This `location` matches request paths like:
        #
        #     /proxy/static/<sec>/<exp>/<proxy_scheme>/<proxy_hostname><proxy_path>
        #
        # For example:
        #
        #     /proxy/static/abc123/456def/https://foo.example.com/bar/gar.pdf
        #
        # The following variables are extracted from the request path for later use:
        #
        # ?sec: The checksum for the NGINX secure link module (see includes/secure_links.conf),
        # e.g. "abc123"
        #
        # ?exp: The timestamp for the NGINX secure link module (see includes/secure_links.conf)
        # e.g. "456def"
        #
        # ?proxy_scheme: The scheme part of the URL-to-be-proxied, "http://" or "https://"
        #
        # ?proxy_hostname: The hostname part of the URL-to-be-proxied, e.g. "foo.example.com"
        # Not to be confused with NGINX's builtin $proxy_host variable!
        #
        # ?proxy_path: The path part of the URL-to-be-proxied, e.g. "/bar/gar.pdf"
        location ~ ^/proxy/static/(?<sec>[a-zA-Z0-9-_]+)/(?<exp>\d+)/(?<proxy_scheme>https?://)(?<proxy_hostname>[^/]+)(?<proxy_path>.*) {
            # We don't want our URLs that proxy third-party pages to show in Google.
            include includes/robots.conf;

            # Require /proxy/static requests to be signed.
            include includes/secure_links.conf;

            include includes/errors.conf;
            include includes/proxy.conf;

            # Cache for one day, but allow serving from cache while revalidating for a week.
            # https://web.dev/stale-while-revalidate/
            proxy_hide_header "Cache-Control";
            add_header "Cache-Control" "public, max-age=86400, stale-while-revalidate=604800";

            # Add an X-Via header for debugging.
            add_header "X-Via" "static-proxy, direct";
        }

        location @handle_redirect {
            include includes/errors.conf;

            # Pass the server name through when connecting to proxied HTTPS servers.
            # This is needed to make proxying of some sites work.
            # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_server_name
            proxy_ssl_server_name on;

            # If we received an absolute redirect from the third-party server
            # ($upstream_http_location begins with "http://" or "https://")
            # then we can follow that redirect location directly.
            #
            # If we received a *relative* redirect ($upstream_http_location
            # does *not* begin with "http://" or "https://") then we need to
            # turn the relative redirect into an absolute one before following
            # it.
            #
            # http://nginx.org/en/docs/http/ngx_http_upstream_module.html#var_upstream_http_
            #
            # Note that we're using NGINX's `if` in a `location` context here,
            # which is said to be evil. But it seems to work, and I don't know
            # of any other way to handle both absolute and relative redirects
            # together.
            #
            # http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#if
            # https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/
            #
            # The "~*" triggers case-insensitive regex matching.
            if ($upstream_http_location ~* "^https?://.*") {
                set $saved_redirect_location '$upstream_http_location';
            }
            # "!~*" triggers *negative* case-insensitive regex matching. The
            # `if` will match if $upstream_http_location does *not* match the
            # given regex.
            if ($upstream_http_location !~* "^https?://.*") {
                set $saved_redirect_location '$proxy_scheme$proxy_hostname$upstream_http_location';
            }

            # Follow the redirect internally, now proxying to the URL given in
            # the redirect's Location header.
            proxy_pass $saved_redirect_location;

            # Add an X-Via header for debugging.
            add_header "X-Via" "static-proxy, redirect";
        }

        location @proxy_not_found {
            # http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return
            return 404;
        }

        location @proxy_too_many_requests {
            # http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return
            return 429;
        }

        location @proxy_client_error {
            # http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return
            return 400;
        }

        location @proxy_upstream_error {
            # http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return
            return 409;
        }

        location / {
            # At least for now we don't want Via 3's non-proxy pages (including
            # the front page) to show in Google. Later (when Via 3 replaces the
            # public Via service) we'll probably want at least the front page
            # to be indexable.
            include includes/robots.conf;

            # Proxy to the Gunicorn/Pyramid app.
            # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass
            proxy_pass http://web;

            # Use HTTP 1.1 for proxying to the Gunicorn/Pyramid app.
            # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_http_version
            proxy_http_version 1.1;

            # Send the full HTTP Host header (including the port) through to
            # the Gunicorn/Pyramid app.
            # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_set_header
            # http://nginx.org/en/docs/http/ngx_http_core_module.html#var_http_
            # TODO: Why do we need to do this?
            proxy_set_header Host $http_host;

            # Add an X-Via header for debugging.
            add_header "X-Via" "compute";
        }
    }
}
